import{d as w,s as x,c as v,a as m,b as a,t as _,u as r,e as i,f as y,o as l,g as B,p as k,h as F,i as b,_ as T}from"./index-5329134a.js";import{T as f,O as h}from"./Table-4a3a32b5.js";const g=c=>(k("data-v-982ea804"),c=c(),F(),c),P={id:"home"},S={class:"section"},C=g(()=>a("div",{class:"title"},"Flow",-1)),I={class:"content"},M={key:0},N={key:0,class:"section",id:"host-usage"},U=g(()=>a("div",{class:"title"},"Host usage",-1)),V={class:"content"},E=w({__name:"Page",setup(c){const u=x.get();function p(){const e=u.flow.stats.find(t=>t.metadata.name==="astiflow.host.usage");if(!(!e||!e.value))return e.value}const n=v(()=>{const e=p();if(!e)return;const t=["B","kB","MB","GB","TB"],s=b(t,[e.memory.resident,e.memory.virtual],!0),o=b(t,[e.memory.used,e.memory.total],!0);return{columns:[{id:"type",label:"Type",order:h.asc},{id:"cpu",label:"CPU"},{id:"memory",label:"Memory"}],rows:[{cells:{type:{label:"Process",value:"Process"},cpu:{label:e.cpu.process!==void 0?e.cpu.process.toFixed(2)+"%":void 0,value:e.cpu.process},memory:{label:s.values[0].toFixed(2)+"/"+s.values[1].toFixed(2)+s.unit,value:e.memory.resident/e.memory.virtual}}},{cells:{type:{label:"Total",value:"Total"},cpu:{label:e.cpu.total.toFixed(2)+"%",value:e.cpu.total},memory:{label:o.values[0].toFixed(2)+"/"+o.values[1].toFixed(2)+o.unit,value:e.memory.used/e.memory.total}}}]}}),d=v(()=>{const e=p();if(!e)return;const t={columns:[{id:"cpu",label:"CPU",order:h.asc},{id:"value",label:"Value"}],rows:[]};return e.cpu.individual.forEach((s,o)=>{t.rows.push({cells:{cpu:{label:(o+1).toString(),value:o},value:{label:s.toFixed(2)+"%",value:s}}})}),t});return(e,t)=>(l(),m("div",P,[a("div",S,[C,a("div",I,[a("div",null,_(r(B)(r(u).flow)),1),r(u).flow.description?(l(),m("div",M,_(r(u).flow.description),1)):i("",!0)])]),n.value||d.value?(l(),m("div",N,[U,a("div",V,[n.value?(l(),y(f,{key:0,table:n.value},null,8,["table"])):i("",!0),d.value?(l(),y(f,{key:1,table:d.value},null,8,["table"])):i("",!0)])])):i("",!0)]))}});const D=T(E,[["__scopeId","data-v-982ea804"]]);export{D as default};
